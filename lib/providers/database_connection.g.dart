// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database_connection.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:TableUser.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// TableUser TABLE
class TableTableUser extends SqfEntityTableBase {
  TableTableUser() {
    // declare properties of EntityTable
    tableName = 'users';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('password', DbType.text),
      SqfEntityFieldBase('createdAt', DbType.datetimeUtc,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetimeUtc,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTableUser();
  }
}

// TableLocation TABLE
class TableTableLocation extends SqfEntityTableBase {
  TableTableLocation() {
    // declare properties of EntityTable
    tableName = 'locations';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('desc', DbType.text),
      SqfEntityFieldBase('longtitude', DbType.text),
      SqfEntityFieldBase('latitude', DbType.text),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('createdAt', DbType.datetimeUtc,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetimeUtc,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTableLocation();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class AttendanceDatabase extends SqfEntityModelProvider {
  AttendanceDatabase() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableTableUser.getInstance,
      TableTableLocation.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region TableUser
class TableUser extends TableBase {
  TableUser(
      {this.id, this.name, this.password, this.createdAt, this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  TableUser.withFields(
      this.id, this.name, this.password, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  TableUser.withId(
      this.id, this.name, this.password, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  TableUser.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['updatedAt'].toString());
    }

    isSaved = true;
  }
  // FIELDS (TableUser)
  int? id;
  String? name;
  String? password;
  DateTime? createdAt;
  DateTime? updatedAt;
  bool? isSaved;
  // end FIELDS (TableUser)

  static const bool _softDeleteActivated = false;
  TableUserManager? __mnTableUser;

  TableUserManager get _mnTableUser {
    return __mnTableUser = __mnTableUser ?? TableUserManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [TableUser]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [TableUser]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      name,
      password,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      password,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<TableUser>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TableUser.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<TableUser>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <TableUser>[];
    try {
      objList = list
          .map((tableuser) =>
              TableUser.fromMap(tableuser as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TableUser.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TableUser>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<TableUser> objList = <TableUser>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = TableUser.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns TableUser by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [TableUser] if exist, otherwise returns null
  Future<TableUser?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    TableUser? obj;
    final data = await _mnTableUser.getById([id]);
    if (data.length != 0) {
      obj = TableUser.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (TableUser) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTableUser.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnTableUser.update(this);
    }

    return id;
  }

  /// Saves the (TableUser) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTableUser.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTableUser.updateOrThrow(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<TableUser> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<TableUser> tableusers,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDatabase().batchStart();
    for (final obj in tableusers) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDatabase().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTableUser.rawInsert(
          'INSERT OR REPLACE INTO users (id, name, password, createdAt, updatedAt)  VALUES (?,?,?,?,?)',
          [
            id,
            name,
            password,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'TableUser id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'TableUser id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'TableUser Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<TableUser>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<TableUser> tableusers,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTableUser.rawInsertAll(
        'INSERT OR REPLACE INTO users (id, name, password, createdAt, updatedAt)  VALUES (?,?,?,?,?)',
        tableusers,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes TableUser

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete TableUser invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTableUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTableUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    const msg =
        "set useSoftDeleting:true in the table definition of [TableUser] to use this feature";
    throw UnimplementedError(msg);
  }

  @override
  TableUserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TableUserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TableUserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TableUserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    createdAt = createdAt ?? DateTime.now();
    updatedAt = updatedAt ?? DateTime.now();
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tableuser

// region TableUserField
class TableUserField extends FilterBase {
  TableUserField(TableUserFilterBuilder tableuserFB) : super(tableuserFB);

  @override
  TableUserFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder isNull() {
    return super.isNull() as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TableUserFilterBuilder;
  }

  @override
  TableUserField get not {
    return super.not as TableUserField;
  }
}
// endregion TableUserField

// region TableUserFilterBuilder
class TableUserFilterBuilder extends ConjunctionBase {
  TableUserFilterBuilder(TableUser obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTableUser = obj._mnTableUser;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TableUserManager? _mnTableUser;

  /// put the sql keyword 'AND'
  @override
  TableUserFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TableUserFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TableUserFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TableUserFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TableUserFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TableUserFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TableUserFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TableUserFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TableUserFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TableUserFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TableUserFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TableUserField _setField(
      TableUserField? field, String colName, DbType dbtype) {
    return TableUserField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TableUserField? _id;
  TableUserField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TableUserField? _name;
  TableUserField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  TableUserField? _password;
  TableUserField get password {
    return _password = _setField(_password, 'password', DbType.text);
  }

  TableUserField? _createdAt;
  TableUserField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetimeUtc);
  }

  TableUserField? _updatedAt;
  TableUserField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetimeUtc);
  }

  /// Deletes List<TableUser> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTableUser!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTableUser!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from users ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTableUser!.updateBatch(qparams, values);
  }

  /// This method always returns [TableUser] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TableUser?
  @override
  Future<TableUser?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTableUser!.toList(qparams);
    final data = await objFuture;
    TableUser? obj;
    if (data.isNotEmpty) {
      obj = TableUser.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [TableUser]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TableUser?
  @override
  Future<TableUser> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        TableUser();
  }

  /// This method returns int. [TableUser]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tableuserCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tableusersFuture = await _mnTableUser!.toList(qparams);
    final int count = tableusersFuture[0]['CNT'] as int;
    if (tableuserCount != null) {
      tableuserCount(count);
    }
    return count;
  }

  /// This method returns List<TableUser> [TableUser]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<TableUser>
  @override
  Future<List<TableUser>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<TableUser> tableusersData = await TableUser.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tableusersData;
  }

  /// This method returns Json String [TableUser]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [TableUser]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [TableUser]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTableUser!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [TableUser]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM users WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTableUser!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [TableUser]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTableUser!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await TableUser.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTableUser!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TableUserFilterBuilder

// region TableUserFields
class TableUserFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetimeUtc);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetimeUtc);
  }
}
// endregion TableUserFields

//region TableUserManager
class TableUserManager extends SqfEntityProvider {
  TableUserManager()
      : super(AttendanceDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'users';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TableUserManager
// region TableLocation
class TableLocation extends TableBase {
  TableLocation(
      {this.id,
      this.desc,
      this.longtitude,
      this.latitude,
      this.isActive,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  TableLocation.withFields(this.id, this.desc, this.longtitude, this.latitude,
      this.isActive, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  TableLocation.withId(this.id, this.desc, this.longtitude, this.latitude,
      this.isActive, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  TableLocation.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['desc'] != null) {
      desc = o['desc'].toString();
    }
    if (o['longtitude'] != null) {
      longtitude = o['longtitude'].toString();
    }
    if (o['latitude'] != null) {
      latitude = o['latitude'].toString();
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['updatedAt'].toString());
    }

    isSaved = true;
  }
  // FIELDS (TableLocation)
  int? id;
  String? desc;
  String? longtitude;
  String? latitude;
  bool? isActive;
  DateTime? createdAt;
  DateTime? updatedAt;
  bool? isSaved;
  // end FIELDS (TableLocation)

  static const bool _softDeleteActivated = false;
  TableLocationManager? __mnTableLocation;

  TableLocationManager get _mnTableLocation {
    return __mnTableLocation = __mnTableLocation ?? TableLocationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (desc != null || !forView) {
      map['desc'] = desc;
    }
    if (longtitude != null || !forView) {
      map['longtitude'] = longtitude;
    }
    if (latitude != null || !forView) {
      map['latitude'] = latitude;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (desc != null || !forView) {
      map['desc'] = desc;
    }
    if (longtitude != null || !forView) {
      map['longtitude'] = longtitude;
    }
    if (latitude != null || !forView) {
      map['latitude'] = latitude;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [TableLocation]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [TableLocation]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      desc,
      longtitude,
      latitude,
      isActive,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      desc,
      longtitude,
      latitude,
      isActive,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<TableLocation>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TableLocation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<TableLocation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <TableLocation>[];
    try {
      objList = list
          .map((tablelocation) =>
              TableLocation.fromMap(tablelocation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TableLocation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TableLocation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<TableLocation> objList = <TableLocation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = TableLocation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns TableLocation by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [TableLocation] if exist, otherwise returns null
  Future<TableLocation?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    TableLocation? obj;
    final data = await _mnTableLocation.getById([id]);
    if (data.length != 0) {
      obj = TableLocation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (TableLocation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTableLocation.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnTableLocation.update(this);
    }

    return id;
  }

  /// Saves the (TableLocation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTableLocation.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTableLocation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<TableLocation> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<TableLocation> tablelocations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDatabase().batchStart();
    for (final obj in tablelocations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDatabase().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTableLocation.rawInsert(
          'INSERT OR REPLACE INTO locations (id, desc, longtitude, latitude, isActive, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            desc,
            longtitude,
            latitude,
            isActive,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'TableLocation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'TableLocation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'TableLocation Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<TableLocation>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<TableLocation> tablelocations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTableLocation.rawInsertAll(
        'INSERT OR REPLACE INTO locations (id, desc, longtitude, latitude, isActive, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?)',
        tablelocations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes TableLocation

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete TableLocation invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTableLocation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTableLocation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    const msg =
        'set useSoftDeleting:true in the table definition of [TableLocation] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TableLocationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TableLocationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TableLocationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TableLocationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isActive = isActive ?? false;
    createdAt = createdAt ?? DateTime.now();
    updatedAt = updatedAt ?? DateTime.now();
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tablelocation

// region TableLocationField
class TableLocationField extends FilterBase {
  TableLocationField(TableLocationFilterBuilder tablelocationFB)
      : super(tablelocationFB);

  @override
  TableLocationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder isNull() {
    return super.isNull() as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TableLocationFilterBuilder;
  }

  @override
  TableLocationField get not {
    return super.not as TableLocationField;
  }
}
// endregion TableLocationField

// region TableLocationFilterBuilder
class TableLocationFilterBuilder extends ConjunctionBase {
  TableLocationFilterBuilder(TableLocation obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTableLocation = obj._mnTableLocation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TableLocationManager? _mnTableLocation;

  /// put the sql keyword 'AND'
  @override
  TableLocationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TableLocationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TableLocationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TableLocationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TableLocationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TableLocationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TableLocationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TableLocationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TableLocationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TableLocationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TableLocationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TableLocationField _setField(
      TableLocationField? field, String colName, DbType dbtype) {
    return TableLocationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TableLocationField? _id;
  TableLocationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TableLocationField? _desc;
  TableLocationField get desc {
    return _desc = _setField(_desc, 'desc', DbType.text);
  }

  TableLocationField? _longtitude;
  TableLocationField get longtitude {
    return _longtitude = _setField(_longtitude, 'longtitude', DbType.text);
  }

  TableLocationField? _latitude;
  TableLocationField get latitude {
    return _latitude = _setField(_latitude, 'latitude', DbType.text);
  }

  TableLocationField? _isActive;
  TableLocationField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  TableLocationField? _createdAt;
  TableLocationField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetimeUtc);
  }

  TableLocationField? _updatedAt;
  TableLocationField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetimeUtc);
  }

  /// Deletes List<TableLocation> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTableLocation!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTableLocation!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from locations ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTableLocation!.updateBatch(qparams, values);
  }

  /// This method always returns [TableLocation] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TableLocation?
  @override
  Future<TableLocation?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTableLocation!.toList(qparams);
    final data = await objFuture;
    TableLocation? obj;
    if (data.isNotEmpty) {
      obj = TableLocation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [TableLocation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TableLocation?
  @override
  Future<TableLocation> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        TableLocation();
  }

  /// This method returns int. [TableLocation]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? tablelocationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tablelocationsFuture = await _mnTableLocation!.toList(qparams);
    final int count = tablelocationsFuture[0]['CNT'] as int;
    if (tablelocationCount != null) {
      tablelocationCount(count);
    }
    return count;
  }

  /// This method returns List<TableLocation> [TableLocation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<TableLocation>
  @override
  Future<List<TableLocation>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<TableLocation> tablelocationsData =
        await TableLocation.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return tablelocationsData;
  }

  /// This method returns Json String [TableLocation]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [TableLocation]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [TableLocation]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTableLocation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [TableLocation]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM locations WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTableLocation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [TableLocation]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTableLocation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await TableLocation.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTableLocation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TableLocationFilterBuilder

// region TableLocationFields
class TableLocationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDesc;
  static TableField get desc {
    return _fDesc = _fDesc ?? SqlSyntax.setField(_fDesc, 'desc', DbType.text);
  }

  static TableField? _fLongtitude;
  static TableField get longtitude {
    return _fLongtitude = _fLongtitude ??
        SqlSyntax.setField(_fLongtitude, 'longtitude', DbType.text);
  }

  static TableField? _fLatitude;
  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.text);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetimeUtc);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetimeUtc);
  }
}
// endregion TableLocationFields

//region TableLocationManager
class TableLocationManager extends SqfEntityProvider {
  TableLocationManager()
      : super(AttendanceDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'locations';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TableLocationManager
class AttendanceDatabaseSequenceManager extends SqfEntityProvider {
  AttendanceDatabaseSequenceManager() : super(AttendanceDatabase());
}
// END OF ENTITIES
